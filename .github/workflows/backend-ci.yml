name: Backend CI

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  backend-ci:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        python-version: [3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: './backend/requirements.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup configuration
      run: cp config.template.py config.py
    
    - name: Create test configuration
      run: |
        cat > test_config.py << EOF
        """Test configuration for ChordMe application."""
        
        SECRET_KEY = 'test-secret-key'
        SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
        SQLALCHEMY_TRACK_MODIFICATIONS = False
        JWT_SECRET_KEY = 'test-jwt-secret-key'
        JWT_EXPIRATION_DELTA = 3600
        TESTING = True
        WTF_CSRF_ENABLED = False
        EOF
    
    - name: Run tests with coverage
      run: |
        export FLASK_CONFIG=test_config
        python -m pytest tests/test_auth.py tests/test_chordpro_support.py tests/test_file_upload_download.py tests/test_password_hashing.py tests/test_song_download.py tests/test_song_model.py tests/test_song_routes.py -v --cov=chordme --cov-report=xml --cov-report=lcov
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: Test application startup
      run: |
        export FLASK_CONFIG=test_config
        timeout 10 python run.py || echo "Application started successfully"
      continue-on-error: true