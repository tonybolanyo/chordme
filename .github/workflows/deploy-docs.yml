name: Deploy Documentation

on:
  # Trigger on new tags (releases)
  push:
    tags:
      - 'v*'
  
  # Trigger on changes to documentation
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '.github/workflows/deploy-docs.yml'
  
  # Allow manual trigger
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ./docs

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Update documentation with version info
        run: |
          # Get version from tag or use 'latest'
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="latest"
          fi
          
          # Update version in documentation
          echo "Updating documentation with version: $VERSION"
          
          # Add version badge to main README
          sed -i "1i![Version](https://img.shields.io/badge/version-$VERSION-blue)" docs/README.md
          
          # Add last updated timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "" >> docs/README.md
          echo "---" >> docs/README.md
          echo "*Documentation last updated: $TIMESTAMP*" >> docs/README.md
          echo "*Version: $VERSION*" >> docs/README.md

      - name: Build with Jekyll
        run: |
          cd docs
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Notification job (optional)
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: Report deployment status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Documentation deployed successfully!"
            echo "üìñ Available at: ${{ needs.deploy.outputs.page_url }}"
          else
            echo "‚ùå Documentation deployment failed"
            exit 1
          fi