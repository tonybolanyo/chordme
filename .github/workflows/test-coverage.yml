permissions:
  contents: read
  actions: read
  checks: write
name: Test Coverage Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-coverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        npm install
        cd frontend && npm install

    - name: Setup backend config
      run: |
        cd backend
        cp config.template.py config.py

    - name: Run Backend Tests with Coverage
      run: |
        cd backend
        FLASK_CONFIG=test_config python -m pytest tests/test_*.py -v \
          --cov=chordme \
          --cov-report=term-missing \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-fail-under=90

    - name: Run Frontend Tests with Coverage  
      run: |
        cd frontend
        npm run test:coverage -- --reporter=verbose --coverage.thresholds.statements=90 --coverage.thresholds.branches=90 --coverage.thresholds.functions=90 --coverage.thresholds.lines=90

    - name: Upload Backend Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload Frontend Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Generate Coverage Report Summary
      run: |
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
        if [ -f backend/coverage.xml ]; then
          echo "Backend coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "Backend coverage report not found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "### Frontend Coverage" >> $GITHUB_STEP_SUMMARY
        if [ -f frontend/coverage/lcov.info ]; then
          echo "Frontend coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "Frontend coverage report not found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check Overall Coverage Threshold
      run: |
        echo "Checking overall coverage meets 90% target..."
        echo "Coverage enforcement enabled - builds will fail if coverage drops below threshold"
        echo "- Backend: 90% minimum coverage required"
        echo "- Frontend: 90% minimum coverage required"
        echo "- Integration: 85% minimum coverage required"