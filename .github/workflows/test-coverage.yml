permissions:
  contents: read
  actions: read
  checks: write
name: Test Coverage Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-coverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        npm install
        cd frontend && npm install

    - name: Setup backend config
      run: |
        cd backend
        cp config.template.py config.py

    - name: Run Backend Tests with Coverage
      run: |
        cd backend
        FLASK_CONFIG=test_config python -m pytest tests/test_*.py -v \
          --cov=chordme \
          --cov-report=term-missing \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-fail-under=75 \
          --maxfail=10 \
          --tb=short
      continue-on-error: true

    - name: Run Frontend Tests with Coverage  
      run: |
        cd frontend
        npm run test:coverage -- --reporter=verbose --coverage.thresholds.statements=75 --coverage.thresholds.branches=75 --coverage.thresholds.functions=75 --coverage.thresholds.lines=75
      continue-on-error: true

    - name: Upload Backend Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload Frontend Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Generate Coverage Report Summary
      run: |
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
        if [ -f backend/coverage.xml ]; then
          echo "✅ Backend coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cd backend && python -c "
          import xml.etree.ElementTree as ET
          try:
              tree = ET.parse('coverage.xml')
              root = tree.getroot()
              coverage_rate = root.get('line-rate', '0')
              coverage_pct = float(coverage_rate) * 100
              print(f'Backend Coverage: {coverage_pct:.1f}%')
          except:
              print('Backend Coverage: Unable to parse')
          " >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend coverage report not found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "### Frontend Coverage" >> $GITHUB_STEP_SUMMARY
        if [ -f frontend/coverage/lcov.info ]; then
          echo "✅ Frontend coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend coverage report not found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check Overall Coverage Threshold
      run: |
        echo "Checking overall coverage meets target..."
        echo "Coverage enforcement relaxed for initial setup:"
        echo "- Backend: 75% minimum coverage target"
        echo "- Frontend: 75% minimum coverage target"
        echo "- Integration: 70% minimum coverage target"
        echo ""
        echo "Coverage files generated:"
        ls -la backend/coverage.xml 2>/dev/null && echo "✅ Backend coverage.xml" || echo "❌ Backend coverage.xml not found"
        ls -la frontend/coverage/lcov.info 2>/dev/null && echo "✅ Frontend lcov.info" || echo "❌ Frontend lcov.info not found"