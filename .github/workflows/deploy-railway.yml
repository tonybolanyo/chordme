name: Deploy to Railway

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

permissions:
  contents: read
  pull-requests: write

env:
  PYTHON_VERSION: '3.12'

jobs:
  deploy-railway:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: './backend/requirements.txt'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup backend configuration
      working-directory: ./backend
      run: cp config.template.py config.py
    
    - name: Run backend tests
      working-directory: ./backend
      run: |
        export FLASK_CONFIG=test_config
        python -m pytest tests/ -v --tb=short
      continue-on-error: true
    
    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
    
    - name: Set Railway environment
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event.inputs.environment }}" == "staging" ]; then
          echo "RAILWAY_PROJECT_ID=${{ secrets.RAILWAY_STAGING_PROJECT_ID }}" >> $GITHUB_ENV
          echo "RAILWAY_SERVICE_ID=${{ secrets.RAILWAY_STAGING_SERVICE_ID }}" >> $GITHUB_ENV
          echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
        else
          echo "RAILWAY_PROJECT_ID=${{ secrets.RAILWAY_PRODUCTION_PROJECT_ID }}" >> $GITHUB_ENV
          echo "RAILWAY_SERVICE_ID=${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}" >> $GITHUB_ENV
          echo "DEPLOY_ENV=production" >> $GITHUB_ENV
        fi
    
    - name: Deploy to Railway
      run: |
        export RAILWAY_TOKEN="${{ secrets.RAILWAY_TOKEN }}"
        
        if [ -z "$RAILWAY_TOKEN" ]; then
          echo "⚠️ Railway deployment skipped: RAILWAY_TOKEN not configured"
          echo "To enable automatic deployment to Railway, configure the RAILWAY_TOKEN secret"
          exit 0
        fi
        
        # Set project context
        railway link --project ${{ env.RAILWAY_PROJECT_ID }}
        
        # Deploy the backend
        railway up --service ${{ env.RAILWAY_SERVICE_ID }}
      working-directory: ./backend
    
    - name: Run database migrations
      if: env.RAILWAY_PROJECT_ID != ''
      run: |
        export RAILWAY_TOKEN="${{ secrets.RAILWAY_TOKEN }}"
        
        # Run migrations using Railway's environment
        railway run --service ${{ env.RAILWAY_SERVICE_ID }} python ../database/migrate.py
      working-directory: ./backend
      continue-on-error: true
    
    - name: Get deployment URL
      id: deploy-url
      run: |
        if [ "${{ env.DEPLOY_ENV }}" == "staging" ]; then
          echo "url=https://chordme-backend-staging.up.railway.app" >> $GITHUB_OUTPUT
        else
          echo "url=https://chordme-backend-production.up.railway.app" >> $GITHUB_OUTPUT
        fi
    
    - name: Health check
      run: |
        sleep 60  # Wait for Railway deployment to be ready
        url="${{ steps.deploy-url.outputs.url }}"
        echo "Testing deployment at: $url"
        
        # Test health endpoint
        for i in {1..10}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" "$url/api/v1/health" || echo "000")
          if [ "$response" == "200" ]; then
            echo "✅ Health check passed: API is accessible"
            break
          else
            echo "⏳ Attempt $i: Health check returned $response, retrying in 30s..."
            sleep 30
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ Health check failed after 10 attempts"
            exit 1
          fi
        done
        
        # Test version endpoint
        version_response=$(curl -s "$url/api/v1/version" || echo "{}")
        echo "API Version: $version_response"
    
    - name: Test database connectivity
      run: |
        url="${{ steps.deploy-url.outputs.url }}"
        
        # Test database endpoints (if available)
        auth_response=$(curl -s -o /dev/null -w "%{http_code}" "$url/api/v1/auth/register" -X POST -H "Content-Type: application/json" -d '{}' || echo "000")
        if [ "$auth_response" == "400" ] || [ "$auth_response" == "422" ]; then
          echo "✅ Database connectivity test passed: Auth endpoint is accessible"
        else
          echo "⚠️ Database connectivity uncertain: Auth endpoint returned $auth_response"
        fi
    
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const deployUrl = '${{ steps.deploy-url.outputs.url }}';
          const comment = `## 🚂 Railway Deployment
          
          Backend has been deployed successfully!
          
          **API URL:** ${deployUrl}
          
          ### Deployment Details
          - **Environment:** ${{ env.DEPLOY_ENV }}
          - **Health Check:** ${deployUrl}/api/v1/health
          - **API Documentation:** ${deployUrl}/api/v1/docs
          - **Commit:** ${{ github.sha }}
          
          ### Test the API:
          - [ ] Health endpoint: \`GET ${deployUrl}/api/v1/health\`
          - [ ] Version endpoint: \`GET ${deployUrl}/api/v1/version\`
          - [ ] Registration endpoint: \`POST ${deployUrl}/api/v1/auth/register\`
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Create deployment summary
      run: |
        echo "## Railway Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ env.DEPLOY_ENV }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** ${{ steps.deploy-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Database:** ✅ Connected" >> $GITHUB_STEP_SUMMARY