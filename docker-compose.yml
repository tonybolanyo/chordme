services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: chordme-db
    environment:
      POSTGRES_DB: chordme
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - chordme-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chordme"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Flask API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chordme-backend
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://postgres:password@db:5432/chordme
      - JWT_SECRET_KEY=development-jwt-secret-key
      - SECRET_KEY=development-secret-key
      - HTTPS_ENFORCED=False
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    networks:
      - chordme-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chordme-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:5000
      - VITE_APP_ENV=development
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - chordme-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  chordme-network:
    driver: bridge