#!/usr/bin/env python3
"""
Google Drive Server-Side Integration Demo

This script demonstrates the new server-side Google Drive endpoints
implemented in ChordMe's backend API.
"""

import json
import requests
import time
from typing import Dict, Any

# Configuration
API_BASE_URL = "http://localhost:5000/api/v1"
TEST_USER = {
    "email": "demo@example.com",
    "password": "DemoPassword123!"
}

class ChordMeGoogleDriveDemo:
    def __init__(self):
        self.jwt_token = None
        self.google_token = "demo_google_oauth_token"  # In real usage, get from frontend OAuth
    
    def register_and_login(self) -> bool:
        """Register and login to get JWT token."""
        print("üîê Authenticating with ChordMe API...")
        
        # Register user
        try:
            response = requests.post(
                f"{API_BASE_URL}/auth/register",
                json=TEST_USER,
                headers={"Content-Type": "application/json"}
            )
            if response.status_code == 201:
                print("‚úì User registered successfully")
            elif response.status_code == 400 and "already exists" in response.text:
                print("‚úì User already exists, continuing...")
            else:
                print(f"‚ùå Registration failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Registration error: {e}")
            return False
        
        # Login to get JWT token
        try:
            response = requests.post(
                f"{API_BASE_URL}/auth/login",
                json=TEST_USER,
                headers={"Content-Type": "application/json"}
            )
            if response.status_code == 200:
                self.jwt_token = response.json()["data"]["token"]
                print("‚úì Login successful, JWT token obtained")
                return True
            else:
                print(f"‚ùå Login failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Login error: {e}")
            return False
    
    def get_headers(self) -> Dict[str, str]:
        """Get request headers with JWT token."""
        return {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.jwt_token}"
        }
    
    def test_validate_and_save(self):
        """Test ChordPro validation and save endpoint."""
        print("\nüìù Testing ChordPro Validation and Save...")
        
        test_data = {
            "access_token": self.google_token,
            "file_name": "demo-song.pro",
            "content": "{title: Demo Song}\n{artist: ChordMe}\n\n[C]Hello [G]world, this is a [Am]demo [F]song"
        }
        
        try:
            response = requests.post(
                f"{API_BASE_URL}/google-drive/validate-and-save",
                json=test_data,
                headers=self.get_headers()
            )
            
            print(f"Status: {response.status_code}")
            result = response.json()
            
            if response.status_code == 400 and "not enabled" in result.get("error", ""):
                print("‚úì Service correctly disabled by default (expected behavior)")
                print("  To enable: Set GOOGLE_DRIVE_ENABLED = True in backend config")
            elif response.status_code == 200:
                print("‚úì Validation and save successful!")
                print(f"  File ID: {result['data']['file']['id']}")
            else:
                print(f"‚ùå Unexpected response: {result}")
        
        except Exception as e:
            print(f"‚ùå Request error: {e}")
    
    def test_batch_validate(self):
        """Test batch validation endpoint."""
        print("\nüìã Testing Batch Validation...")
        
        test_data = {
            "access_token": self.google_token,
            "file_ids": ["demo_file_1", "demo_file_2", "demo_file_3"]
        }
        
        try:
            response = requests.post(
                f"{API_BASE_URL}/google-drive/batch-validate",
                json=test_data,
                headers=self.get_headers()
            )
            
            print(f"Status: {response.status_code}")
            result = response.json()
            
            if response.status_code == 400 and "not enabled" in result.get("error", ""):
                print("‚úì Service correctly disabled by default (expected behavior)")
                print("  Batch validation would process multiple files efficiently")
            elif response.status_code == 200:
                print("‚úì Batch validation successful!")
                print(f"  Processed: {result['data']['processed']} files")
            else:
                print(f"‚ùå Unexpected response: {result}")
        
        except Exception as e:
            print(f"‚ùå Request error: {e}")
    
    def test_backup_songs(self):
        """Test backup songs endpoint."""
        print("\nüíæ Testing Backup Songs...")
        
        test_data = {
            "access_token": self.google_token,
            "backup_folder_name": "ChordMe Demo Backup"
        }
        
        try:
            response = requests.post(
                f"{API_BASE_URL}/google-drive/backup-songs",
                json=test_data,
                headers=self.get_headers()
            )
            
            print(f"Status: {response.status_code}")
            result = response.json()
            
            if response.status_code == 400 and "not enabled" in result.get("error", ""):
                print("‚úì Service correctly disabled by default (expected behavior)")
                print("  Backup would create organized folder structure in Google Drive")
            elif response.status_code == 200:
                print("‚úì Backup successful!")
                print(f"  Backed up: {result['data']['backed_up']} songs")
            else:
                print(f"‚ùå Unexpected response: {result}")
        
        except Exception as e:
            print(f"‚ùå Request error: {e}")
    
    def test_authentication_required(self):
        """Test that endpoints require authentication."""
        print("\nüîí Testing Authentication Requirements...")
        
        endpoints = [
            "google-drive/validate-and-save",
            "google-drive/batch-validate", 
            "google-drive/backup-songs"
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.post(
                    f"{API_BASE_URL}/{endpoint}",
                    json={"test": "data"}
                )
                
                if response.status_code == 401:
                    print(f"‚úì {endpoint}: Correctly requires authentication")
                else:
                    print(f"‚ùå {endpoint}: Authentication not enforced")
            
            except Exception as e:
                print(f"‚ùå {endpoint}: Error testing auth: {e}")
    
    def run_demo(self):
        """Run complete demo of Google Drive integration."""
        print("üöÄ ChordMe Google Drive Server-Side Integration Demo")
        print("=" * 60)
        
        if not self.register_and_login():
            print("‚ùå Authentication failed, cannot continue demo")
            return
        
        # Test all endpoints
        self.test_validate_and_save()
        self.test_batch_validate()
        self.test_backup_songs()
        self.test_authentication_required()
        
        print("\n" + "=" * 60)
        print("‚úÖ Demo completed successfully!")
        print("\nKey Features Demonstrated:")
        print("‚Ä¢ Server-side ChordPro validation before Google Drive save")
        print("‚Ä¢ Batch validation of multiple files")
        print("‚Ä¢ Automated backup of user songs to Google Drive")
        print("‚Ä¢ Proper authentication and security controls")
        print("‚Ä¢ Rate limiting and request size validation")
        print("\nTo enable Google Drive integration:")
        print("1. Set GOOGLE_DRIVE_ENABLED = True in backend/config.py")
        print("2. Configure Google OAuth2 client ID and secret")
        print("3. Ensure HTTPS is enabled for production")


if __name__ == "__main__":
    demo = ChordMeGoogleDriveDemo()
    demo.run_demo()