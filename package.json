{
  "name": "chordme",
  "version": "1.0.0",
  "description": "ChordMe - Lyrics and chords in a simple way",
  "scripts": {
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && python run.py",
    "build:frontend": "cd frontend && npm run build",
    "test:frontend": "cd frontend && npm run test",
    "test:frontend:run": "cd frontend && npm run test:run",
    "test:frontend:coverage": "cd frontend && npm run test:coverage",
    "test:frontend:security": "cd frontend && npm run test -- --run firestore-security-validation.test.ts",
    "test:backend": "cd backend && FLASK_CONFIG=test_config python -m pytest tests/ -v",
    "test:backend:coverage": "cd backend && FLASK_CONFIG=test_config python -m pytest tests/test_*.py -v --cov=chordme --cov-report=term --cov-report=html:htmlcov --cov-report=xml:coverage.xml --cov-report=lcov:coverage.lcov",
    "test:integration": "cd integration-tests && python -m pytest -v",
    "test:e2e": "npx playwright test",
    "test:all": "npm run test:frontend:run && npm run test:backend && npm run test:integration",
    "test:coverage": "npm run test:frontend:coverage && npm run test:backend:coverage",
    "test:security": "cd backend && FLASK_CONFIG=test_config python -m pytest tests/test_owasp_security_audit.py -v",
    "test:security:full": "cd backend && FLASK_CONFIG=test_config python -m pytest tests/test_owasp_security_audit.py tests/test_security_enhancements.py tests/test_advanced_security_audit.py -v",
    "test:milestone3": "cd integration-tests && python -m pytest test_milestone3_feature_integration.py -v",
    "test:collaboration:load": "python scripts/load_test_collaboration.py",
    "test:e2e:milestone3": "npx playwright test e2e/milestone3-integration.spec.ts",
    "validate:milestone3": "python scripts/validate_milestone3_integration.py",
    "performance:regression": "python scripts/performance_regression_test.py",
    "performance:alerts:setup": "python scripts/setup_performance_alerts.py",
    "performance:alerts:test": "python scripts/setup_performance_alerts.py --test",
    "performance:alerts:status": "python scripts/setup_performance_alerts.py --status",
    "security:audit": "python scripts/security_audit.py",
    "security:scan": "cd backend && python -m bandit -r chordme/ && python -m safety check",
    "test:enterprise": "python scripts/enterprise_test_runner.py",
    "test:enterprise:integration": "cd integration-tests && python -m pytest test_enterprise_workflows.py -v",
    "test:enterprise:security": "cd integration-tests && python -m pytest test_enterprise_security_integration.py -v",
    "test:enterprise:e2e": "npx playwright test e2e/enterprise-workflows.spec.ts",
    "test:enterprise:load": "python scripts/enterprise_load_testing.py --users 100 --duration 10",
    "test:enterprise:load:light": "python scripts/enterprise_load_testing.py --users 20 --duration 5",
    "test:enterprise:performance": "python scripts/enterprise_performance_benchmark.py --users 50 --duration 10",
    "test:enterprise:performance:quick": "python scripts/enterprise_performance_benchmark.py --users 10 --duration 5",
    "test:enterprise:all": "python scripts/enterprise_test_runner.py --test-suites integration security_integration e2e_workflows",
    "test:enterprise:full": "python scripts/enterprise_test_runner.py",
    "validate:enterprise:readiness": "python scripts/enterprise_test_runner.py --test-suites integration security_integration performance_benchmark",
    "lint:frontend": "cd frontend && npm run lint",
    "format:frontend": "cd frontend && npm run format",
    "deploy:netlify": "./scripts/deployment/deploy-netlify.sh",
    "deploy:railway": "./scripts/deployment/deploy-railway.sh",
    "deploy:full-stack": "./scripts/deployment/deploy-full-stack.sh",
    "deploy:staging": "./scripts/deployment/deploy-full-stack.sh staging",
    "deploy:production": "./scripts/deployment/deploy-full-stack.sh production",
    "health-check": "python scripts/deployment/health-check.py",
    "migrate": "python database/migrate.py",
    "docker:start": "./scripts/docker/docker-setup.sh start",
    "docker:stop": "./scripts/docker/docker-setup.sh stop",
    "docker:status": "./scripts/docker/docker-setup.sh status",
    "docker:logs": "./scripts/docker/docker-setup.sh logs",
    "docker:cleanup": "./scripts/docker/docker-setup.sh cleanup",
    "docker:dev": "docker compose -f docker-compose.dev.yml up -d",
    "docker:dev:stop": "docker compose -f docker-compose.dev.yml down",
    "k8s:setup": "./scripts/docker/minikube-setup.sh full-setup",
    "k8s:start": "./scripts/docker/minikube-setup.sh start",
    "k8s:deploy": "./scripts/docker/minikube-setup.sh deploy",
    "k8s:status": "./scripts/docker/minikube-setup.sh status",
    "k8s:cleanup": "./scripts/docker/minikube-setup.sh cleanup"
  },
  "devDependencies": {
    "@axe-core/playwright": "^4.10.2",
    "@playwright/test": "^1.54.1",
    "axe-core": "^4.10.3"
  },
  "keywords": [
    "music",
    "chords",
    "lyrics",
    "chordpro"
  ],
  "author": "Tony Bolanyo",
  "license": "MIT"
}
